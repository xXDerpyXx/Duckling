(include "kit/header")
(import-namespace kit)
(namespace language-model)
(macro array-of (n ...body)
       `(scoped
         (var r [])
         (do-times @n (.push r (scoped ...@body)))
         r))

(require! (lit Probability-tree) "./probability-tree")



(macro fget (...body)
       `(fpipe (get ...@body)))

(require! (lit File-system) "./file-system")

(require! Path 'path)
(def-interface Storage ()
  (fs ((create File-system) "."))
  (def-generic save (p m fs)
    (pipe (.insert fs p)
          (then-do
           (let ((sequences (.map m.*nodes (fget 'seq)))
                 (counts (.map m.*nodes (fget 'count))))
             (Promise.all [(.set fs (.join Path p "counts.json") (JSON.stringify counts))
                           (.set  fs (.join Path p "sequences.json") (JSON.stringify sequences))])))))

  (def-generic load (p fs)
    (var m ((create Model)))
    (async-let ((counts (pipe (.find fs (Path.join p "counts.json"))
                              (.then  (fget 'string))
                              (.then JSON.parse)))

                (sequences (pipe (.find fs (Path.join p "sequences.json"))
                                 (.then  (fget 'string))
                                 (.then JSON.parse))))


      (.reduce sequences (=> (m s i) (.add m s (get counts i)) m) m))))
(export Storage)

(def summate (arr f)
  (.reduce arr (=> (a b i) (+ a (f b i))) 0))

(def-interface Model ((*root ((create this.Graph)))
                      (*nodes []))

  (Graph Probability-tree)

  (init (assign *root.*model this))


  (gett total (summate this.*nodes (fget 'count)))

  (def each (f) (.each this.*root f) this)

  (models (new Map))

  (def-generic save (path (m this))
    (.save Model-storage path m))

  (def-generic load (path)
    (.load Model-storage path))

  (def-generic random-walk (n f (m this))

    (var t (.random m))

    (var gram (rest t.seq))
    (var out [])

    (do-times n
      (assign t (.random (.given m (f gram))))
      (assign gram (rest t.seq))
      (.push out (last t.seq)))
    out)
  (def-generic random-sequence (n (m this))

    (var t (.random m))

    (var gram (rest t.seq))
    (var out [])

    (do-times n
      (assign t (.random (.given m gram)))
      (assign gram (rest t.seq))
      (.push out (last t.seq)))
    out)

  (def-generic generate-random-phrase (n (m this))
    (.join (.random-sequence m n) " "))

  (def *next-gram (m)
    (=> (gram t)
        (.add m gram)
        [(dots (rest gram)) t]))

  (def-generic train (n tokens (m this) *next-gram )

    (var gram (array-of n null))
    (.push tokens (dots gram))
    (.reduce tokens  (*next-gram m) gram))

  (def-generic given (seq models)
    (if (> seq.length 0)
        (let ((*root (.find this.*root seq))
              (*nodes []))

          (if *root
              (do (each *root (node)
                        (if (not (= node.value null))
                            (.push *nodes node)))

                  (remember models *root
                            (pipe *nodes (.sort  (=> (a b) (- a.count b.count))))
                            ((create Model) ((create *root) null null *root.children) *nodes)))

              (throw (new Error "miscounting has occured")))) this))

  (def random ()

    (.sort this)
    (var t this.total)

    (var r (Math.floor (* (Math.random) t))
         c 0
         i 0)


    (var node (get this.*nodes i))

    (incr-by c node.count)

    (until (> c r)


           (++ i)
           (assign node (get this.*nodes i))

           (incr-by c node.count)) node)

  (def likelyhood (seq)
    (var node (.find this.*root seq))
    (/ node.count
       this.total ))

  (def save (fs path ))

  (def sort ()
    (.sort this.*nodes (=> (a b) (- a.count b.count))))

  (def-generic add-count (seq n)
    (.trace-from this.*root seq (#-> (get 'count ) (incr-by n))))

  (def-generic sub-count (seq n)
    (.trace-from this.*root seq (#-> (get 'count ) (decr-by n))))

  (def degrade (seq)
    (var node (.find this.*root seq))
    (if (and (not (= null node))
             (defined? node)
             (> node.count 1))
        (until (= node null)
               (-- node.count)
               (assign node node.parent))))

  (def-generic add (seq (t 1))
    (.insert this.*root seq)
    node))

(export Model)
