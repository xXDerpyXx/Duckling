(include "kit/header")
(import-namespace kit)

(def-interface Tree ()

  (value null)
  (parent null)
  (depth 0)

  (traverse-branches? true)

  (def-generic branch? (value) (= null value))
  (def-generic leaf? (value) (not (= null value)))


  (def-generic descend (seq f (tree this))
    (if (empty? seq)
        tree
        (f tree seq)))

  (def-generic delete (seq))

  (def-generic find (seq (tree this))
    (if (empty? seq)
        tree
        (.*find tree seq)))

  (def-generic has (seq (tree this))
    (if (.find tree seq) true false))

  (def-generic insert (seq  (tree this) )

    (if (empty? seq)
        tree

        (let ((node (.*insert tree seq)))
          ;; (sprint node)

          (assign node.depth (+ 1 tree.depth))
          (.insert node (rest seq)))))

  (def-generic set (seq value (tree this))
    (set (.insert tree  seq) 'value value))

  (def-generic add (key (tree this) (*children tree.*children))
    (or (*children.get key) ((create tree) undefined tree)))


  (def-generic each (f traverse-branches? leaf? *children )

    (def preorder-traverse (node k)
      (f node k)
      (.each node f))

    (if traverse-branches?

        (.each *children preorder-traverse true leaf? *children)

        (each *children (node k)
              (if (leaf? node)
                  (f node k)
                  (.each node f false leaf? this.*children))))))
(export Tree)

(def-interface Tree-map (value parent (*children (new Map)))

  (extend Tree)

  (def-generic delete (seq (tree this) )

    (var node (.find tree seq)
         rkeys (.reverse seq)
         )

    (print "deleting node" node)
    (print "from tree" tree)
    (each rkeys (k)
          (print "deleting child" k )
          (.delete node.parent.*children k)
          (assign node node.parent)))

  (def-generic *find (seq (tree this) (*children tree.*children) (node (*children.get (first seq))))

    (if node (.find node (rest seq)) false))

  (def-generic *insert (seq *children (tree this) (node (.add tree (first seq))))

    (*children.set (first seq) node )
    node))

(export Tree-map)
