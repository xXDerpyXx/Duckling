
(var state  (.then (.login client token) (aprint "login success") (athrow "login failed"))

     )
(var brain (Model))
(def-curried say (t noun)
  (.writes noun [t]))
(macro def-actor (name args ...body)
       )
(def-interface Short-term-memory ())
(def-interface Messages ())
(def-interface Next-response ())

(def-interface Duckling ()

  (extend Event-emitter.prototype)

  (init (.call Event-emitter this))

  (client client)
  (token token)

  (brain brain)


  (sett channel keys (task (assign this.*channel keys)))
  (gett channel (task (.find Channel-system this.*channel)))


  (state state)


  (def-generic reads (msg)
    "takes data and introduces it to ducklings brain"

    (print "duckling is reading")
    (task

     (unless (= msg.author.name "Duckling (Error)")
       (assign this.*channel [msg.guild.name msg.channel.name])
       (var t (.replace msg.content
                        (regex "[.!?]" )
                        " <s> "
                        ))
       (var o (.split t (regex "\\s")))

       (print "reading" t)

       (.emit this 'reads o)

       (if (.includes t "!duckling")
           (.writes this (.random-sequence this.brain 20))))))

  (def-generic remembers (word-list)
    (task
     (.train this.brain 2 word-list)
     (.emit this 'remembers this.brain )))

  (response [])
  (context ['wee])
  (def-generic thinks (model response context)

    (task

     (print "context of thought" context )
     (print "incomplete thought" response)
     (var e (get (.random (.given model context))
                 'token))
     (print "e" e)
     (assign this.context [(dots (rest context)) e])
     (if (= null e)
         (do (.emit this 'thinks response)
             (assign this.response []))
         (.push response e))))

  (def-generic writes ( (s []) channel)
    (print "writes" s)

    (var t (.join s " "))
    (task
     (then channel c

           (print "duckling is writing" t "to" c)
           c.startTyping()

           (c.send t)

           (print "[DUCKLING] "  t)
           (c.stopTyping true)
           (.emit this 'writes t)))))




;; (print (.find Channel-system ["Error log" "bot-tests"]))



;; (print (.find client.guilds (=> (v) (= v.name "Error log"))))

;; (print client.guilds)
;; (print client)


(say "I am too stupid to talk with out a puppetteer right now" Duckling)





