
(var state  (.then (.login client token) (aprint "login success") (athrow Error "login failed")))
(var brain (Model))

(def-curried say (t noun)
  (.writes noun [t]))

(macro def-actor (name args ...body)
       )
(def-interface Short-term-memory ())
(def-interface Messages ())
(def-interface Next-response ())

(def-interface Duckling ()

  (extend Event-emitter.prototype)

  (init (.call Event-emitter this))

  (client client)
  (token token)

  (brain brain)


  (sett channel keys (task (assign this.*channel keys)))
  (gett channel (task (print "getting channel" this.*channel)(.find Channel-system this.*channel)))


  (state state)


  (def-generic reads (msg)
    "takes data and introduces it to ducklings brain"

    (task

     (print "reading")

     (unless (= msg.author.name "Duckling (Error)")
       (assign this.*channel [msg.guild.name msg.channel.name])
       (var t (.replace msg.content
                        (regex "[.!?]" )
                        " <s> "
                        ))
       (var o (.split t (regex "\\s")))


       (.emit this 'reads o)

       ;; (if (.includes t "duckling")
       ;;         (var r (.random-sequence this.brain 20))

       ;;         (do (print "[duckling was mentioned]" r)
       ;;         (.writes this )))
       )))

  (def-generic remembers (word-list)
    (task

     (.train this.brain 5 word-list)

     (.degrade this.brain (get (.random this.brain) 'seq))

     (.emit this 'remembers [this.brain word-list] )))

  (response [])
  (context [null null null null])

  (def thinks ([model words] )
    (print "attempting to think")

    (task
     ;;(unless (.some words include-ducklings-name))

     (var r (.random (.given model this.context)))
     (var token (get r 'token))
     (assign this.context [(dots (rest this.context)) token])

     (print "likelyhood" r.likelyhood)
     (.push this.response token)
     (if (= null token)
         (do (print "done thinking")
             (.emit this 'thinks this.response)
             (assign this.response []))

         (if (or (< r.likelyhood 0.7)
                 (.some ["Duckling" "duckling" "you" "your" "you're" ]
                        (=> (name) (= name token))))

             (do (print "thinking hard..." )
                 (.emit this 'remembers [model words] ))))))

  (def-generic writes ( (s []) channel)

    (var t (+ (.join s " ") "."))
    (task
     (then channel c

           (unless (= t ".")

             c.startTyping()

             (c.send t)

             (print "[DUCKLING] "  t)
             (c.stopTyping true)
             (.emit this 'writes t))))))




;; (print (.find Channel-system ["Error log" "bot-tests"]))



;; (print (.find client.guilds (=> (v) (= v.name "Error log"))))

;; (print client.guilds)
;; (print client)






